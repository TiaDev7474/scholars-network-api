// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  username  String
  password  String      @db.Text
  email     String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  roles     UserRoles[] @default([USER])
  profile   Profile?
}

model Profile {
  id                    String                @id @default(uuid())
  bio                   String?
  profilePicture        String?
  dateOfBirth           DateTime?
  countryId             Int
  currentStudyLevelId   Int
  userId                String                @unique
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  country               Country               @relation("ProfileCountry", fields: [countryId], references: [id], onDelete: Cascade)
  currentStudyLevel     StudyLevel            @relation(fields: [currentStudyLevelId], references: [id], onDelete: Cascade)
  desiredStudyCountries DesiredStudyCountry[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  academicInterests     AcademicInterests[]
}

model Country {
  id              Int                   @id @default(autoincrement())
  name            String                @unique
  profiles        Profile[]             @relation("ProfileCountry")
  desiredProfiles DesiredStudyCountry[]
}

model AcademicInterests {
  id         String    @id @default(uuid())
  profileId  String
  academicId Int
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  academic   Academics @relation(fields: [academicId], references: [id])
}

model Academics {
  id                 Int                 @id @default(autoincrement())
  key                String
  title              String
  AcademicInteresrts AcademicInterests[]
}

model DesiredStudyCountry {
  id        String  @id @default(uuid())
  profileId String
  countryId Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  country   Country @relation(fields: [countryId], references: [id])
}

model StudyLevel {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  profiles Profile[]
}

enum UserRoles {
  ADMIN
  USER
  MODERATOR
}
